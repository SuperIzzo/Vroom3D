<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.4 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#related">Related Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::Vector2&lt; T &gt; Class Template Reference<div class="ingroups"><a class="el" href="group__system.htm">System module</a></div></div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="sf::Vector2" -->
<p>Utility template class for manipulating 2-dimensional vectors.  
 <a href="classsf_1_1Vector2.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Vector2_8hpp_source.htm">Vector2.hpp</a>&gt;</code></p>

<p><a href="classsf_1_1Vector2-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#a58c32383b5291380db4b43a289f75988">Vector2</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a58c32383b5291380db4b43a289f75988"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#aed26a72164e59e8a4a0aeee2049568f1">Vector2</a> (T X, T Y)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the vector from its coordinates.  <a href="#aed26a72164e59e8a4a0aeee2049568f1"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename U &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#af1c25d0c262495d9b0845f8a8969b24f">Vector2</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; U &gt; &amp;vector)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the vector from another type of vector.  <a href="#af1c25d0c262495d9b0845f8a8969b24f"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2"><a class="anchor" id="aed26a72164e59e8a4a0aeee2049568f1"></a><!-- doxytag: member="sf::Vector2::Vector2" ref="aed26a72164e59e8a4a0aeee2049568f1" args="(T X, T Y)" -->
template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Vector2</b> (T X, T Y)</td></tr>
<tr><td class="memTemplParams" colspan="2"><a class="anchor" id="af1c25d0c262495d9b0845f8a8969b24f"></a><!-- doxytag: member="sf::Vector2::Vector2" ref="af1c25d0c262495d9b0845f8a8969b24f" args="(const Vector2&lt; U &gt; &amp;vector)" -->
template&lt;typename U &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Vector2</b> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; U &gt; &amp;vector)</td></tr>
<tr><td colspan="2"><h2><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#a1e6ad77fa155f3753bfb92699bd28141">x</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">X coordinate of the vector.  <a href="#a1e6ad77fa155f3753bfb92699bd28141"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#a420f2481b015f4eb929c75f2af564299">y</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Y coordinate of the vector.  <a href="#a420f2481b015f4eb929c75f2af564299"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="related"></a>
Related Functions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p>(Note that these are not member functions.) </p>
</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#af91ba9e90b2364cfa8302b73401bd00a">operator-</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of unary operator -.  <a href="#af91ba9e90b2364cfa8302b73401bd00a"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#ad631747b8bd20bb3e75ed51771c0d7ed">operator+=</a> (<a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;left, const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator +=.  <a href="#ad631747b8bd20bb3e75ed51771c0d7ed"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#ae63028b6ab752bbec460ed2587623847">operator-=</a> (<a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;left, const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator -=.  <a href="#ae63028b6ab752bbec460ed2587623847"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#a9f2f19f0acff87ebd0bbc0716cd8b98a">operator+</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;left, const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator +.  <a href="#a9f2f19f0acff87ebd0bbc0716cd8b98a"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#a51f6637b0db5440e7549287a163cc2ce">operator-</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;left, const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator -.  <a href="#a51f6637b0db5440e7549287a163cc2ce"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#a80a6e4893c6fbd8eca6047cdaf1c5416">operator*</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;left, T right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator *.  <a href="#a80a6e4893c6fbd8eca6047cdaf1c5416"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#ac7499d842cf153bea0f567b2b57256b5">operator*</a> (T left, const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator *.  <a href="#ac7499d842cf153bea0f567b2b57256b5"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#ab356072020215d4d64aed2db8bb3b53f">operator*=</a> (<a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;left, T right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator *=.  <a href="#ab356072020215d4d64aed2db8bb3b53f"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#a64659ab5db944895a1104e01e8309efa">operator/</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;left, T right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator /.  <a href="#a64659ab5db944895a1104e01e8309efa"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#a0aebb326092754768f08d959053cd913">operator/=</a> (<a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;left, T right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator /=.  <a href="#a0aebb326092754768f08d959053cd913"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#ac873f3e94b54998e6b1c940af4e97678">operator==</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;left, const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator ==.  <a href="#ac873f3e94b54998e6b1c940af4e97678"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm#a128bc6743be87cbb770e09a7524049e2">operator!=</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;left, const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary operator !=.  <a href="#a128bc6743be87cbb770e09a7524049e2"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br/>
class sf::Vector2&lt; T &gt;</h3>

<p>Utility template class for manipulating 2-dimensional vectors. </p>
<p><a class="el" href="classsf_1_1Vector2.htm" title="Utility template class for manipulating 2-dimensional vectors.">sf::Vector2</a> is a simple class that defines a mathematical vector with two coordinates (x and y).</p>
<p>It can be used to represent anything that has two dimensions: a size, a point, a velocity, etc.</p>
<p>The template parameter T is the type of the coordinates. It can be any type that supports arithmetic operations (+, -, /, *) and comparisons (==, !=), for example int or float.</p>
<p>You generally don't have to care about the templated form (sf::Vector2&lt;T&gt;), the two most common specializations have special typedefs: </p>
<ul>
<li>sf::Vector2&lt;float&gt; is sf::Vector2f </li>
<li>sf::Vector2&lt;int&gt; is sf::Vector2i</li>
</ul>
<p>The <a class="el" href="classsf_1_1Vector2.htm" title="Utility template class for manipulating 2-dimensional vectors.">sf::Vector2</a> class has a small and simple interface, its x and y members can be accessed directly (there's no accessor like SetX(), GetX()) and it contains no mathematical function like dot product, cross product, length, etc.</p>
<p>Usage example: </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> v1(16.5f, 24.f);
 v1.x = 18.2f;
 <span class="keywordtype">float</span> <a class="code" href="classsf_1_1Vector2.htm#a420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> = v1.y;

 <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> v2 = v1 * 5.f;
 <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> v3;
 v3 = v1 + v2;

 <span class="keywordtype">bool</span> different = (v2 != v3);
</pre></div><p>Note: for 3-dimensional vectors, see <a class="el" href="classsf_1_1Vector3.htm" title="Utility template class for manipulating 3-dimensional vectors.">sf::Vector3</a>. </p>

<p>Definition at line <a class="el" href="Vector2_8hpp_source.htm#l00037">37</a> of file <a class="el" href="Vector2_8hpp_source.htm">Vector2.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a58c32383b5291380db4b43a289f75988"></a><!-- doxytag: member="sf::Vector2::Vector2" ref="a58c32383b5291380db4b43a289f75988" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2</a>&lt; T &gt;::<a class="el" href="classsf_1_1Vector2.htm">Vector2</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>
<p>Creates a Vector2(0, 0). </p>

</div>
</div>
<a class="anchor" id="aed26a72164e59e8a4a0aeee2049568f1"></a><!-- doxytag: member="sf::Vector2::Vector2" ref="aed26a72164e59e8a4a0aeee2049568f1" args="(T X, T Y)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2</a>&lt; T &gt;::<a class="el" href="classsf_1_1Vector2.htm">Vector2</a> </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>Y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct the vector from its coordinates. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>X coordinate </td></tr>
    <tr><td class="paramname">Y</td><td>Y coordinate </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af1c25d0c262495d9b0845f8a8969b24f"></a><!-- doxytag: member="sf::Vector2::Vector2" ref="af1c25d0c262495d9b0845f8a8969b24f" args="(const Vector2&lt; U &gt; &amp;vector)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<div class="memtemplate">
template&lt;typename U &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2</a>&lt; T &gt;::<a class="el" href="classsf_1_1Vector2.htm">Vector2</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; U &gt; &amp;&#160;</td>
          <td class="paramname"><em>vector</em></td><td>)</td>
          <td><code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct the vector from another type of vector. </p>
<p>This constructor doesn't replace the copy constructor, it's called only when U != T. A call to this constructor will fail to compile if U is not convertible to T.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">vector</td><td>Vector to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a128bc6743be87cbb770e09a7524049e2"></a><!-- doxytag: member="sf::Vector2::operator!=" ref="a128bc6743be87cbb770e09a7524049e2" args="(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator !=. </p>
<p>This operator compares strict difference between two vectors.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a vector) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a vector)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <em>left</em> is not equal to <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a80a6e4893c6fbd8eca6047cdaf1c5416"></a><!-- doxytag: member="sf::Vector2::operator*" ref="a80a6e4893c6fbd8eca6047cdaf1c5416" args="(const Vector2&lt; T &gt; &amp;left, T right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator *. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a vector) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a scalar value)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Memberwise multiplication by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="ac7499d842cf153bea0f567b2b57256b5"></a><!-- doxytag: member="sf::Vector2::operator*" ref="ac7499d842cf153bea0f567b2b57256b5" args="(T left, const Vector2&lt; T &gt; &amp;right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; operator* </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator *. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a scalar value) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a vector)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Memberwise multiplication by <em>left</em> </dd></dl>

</div>
</div>
<a class="anchor" id="ab356072020215d4d64aed2db8bb3b53f"></a><!-- doxytag: member="sf::Vector2::operator*=" ref="ab356072020215d4d64aed2db8bb3b53f" args="(Vector2&lt; T &gt; &amp;left, T right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator *=. </p>
<p>This operator performs a memberwise multiplication by <em>right</em>, and assigns the result to <em>left</em>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a vector) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a scalar value)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to <em>left</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a9f2f19f0acff87ebd0bbc0716cd8b98a"></a><!-- doxytag: member="sf::Vector2::operator+" ref="a9f2f19f0acff87ebd0bbc0716cd8b98a" args="(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator +. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a vector) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a vector)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Memberwise addition of both vectors </dd></dl>

</div>
</div>
<a class="anchor" id="ad631747b8bd20bb3e75ed51771c0d7ed"></a><!-- doxytag: member="sf::Vector2::operator+=" ref="ad631747b8bd20bb3e75ed51771c0d7ed" args="(Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp; operator+= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator +=. </p>
<p>This operator performs a memberwise addition of both vectors, and assigns the result to <em>left</em>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a vector) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a vector)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to <em>left</em> </dd></dl>

</div>
</div>
<a class="anchor" id="af91ba9e90b2364cfa8302b73401bd00a"></a><!-- doxytag: member="sf::Vector2::operator&#45;" ref="af91ba9e90b2364cfa8302b73401bd00a" args="(const Vector2&lt; T &gt; &amp;right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of unary operator -. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">right</td><td>Vector to negate</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Memberwise opposite of the vector </dd></dl>

</div>
</div>
<a class="anchor" id="a51f6637b0db5440e7549287a163cc2ce"></a><!-- doxytag: member="sf::Vector2::operator&#45;" ref="a51f6637b0db5440e7549287a163cc2ce" args="(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator -. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a vector) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a vector)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Memberwise subtraction of both vectors </dd></dl>

</div>
</div>
<a class="anchor" id="ae63028b6ab752bbec460ed2587623847"></a><!-- doxytag: member="sf::Vector2::operator&#45;=" ref="ae63028b6ab752bbec460ed2587623847" args="(Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp; operator-= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator -=. </p>
<p>This operator performs a memberwise subtraction of both vectors, and assigns the result to <em>left</em>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a vector) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a vector)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to <em>left</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a64659ab5db944895a1104e01e8309efa"></a><!-- doxytag: member="sf::Vector2::operator/" ref="a64659ab5db944895a1104e01e8309efa" args="(const Vector2&lt; T &gt; &amp;left, T right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator /. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a scalar value) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a vector)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Memberwise division by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a0aebb326092754768f08d959053cd913"></a><!-- doxytag: member="sf::Vector2::operator/=" ref="a0aebb326092754768f08d959053cd913" args="(Vector2&lt; T &gt; &amp;left, T right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator /=. </p>
<p>This operator performs a memberwise division by <em>right</em>, and assigns the result to <em>left</em>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a vector) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a scalar value)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to <em>left</em> </dd></dl>

</div>
</div>
<a class="anchor" id="ac873f3e94b54998e6b1c940af4e97678"></a><!-- doxytag: member="sf::Vector2::operator==" ref="ac873f3e94b54998e6b1c940af4e97678" args="(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary operator ==. </p>
<p>This operator compares strict equality between two vectors.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a vector) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a vector)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <em>left</em> is equal to <em>right</em> </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a1e6ad77fa155f3753bfb92699bd28141"></a><!-- doxytag: member="sf::Vector2::x" ref="a1e6ad77fa155f3753bfb92699bd28141" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classsf_1_1Vector2.htm">sf::Vector2</a>&lt; T &gt;::<a class="el" href="classsf_1_1Vector2.htm#a1e6ad77fa155f3753bfb92699bd28141">x</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>X coordinate of the vector. </p>

<p>Definition at line <a class="el" href="Vector2_8hpp_source.htm#l00075">75</a> of file <a class="el" href="Vector2_8hpp_source.htm">Vector2.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a420f2481b015f4eb929c75f2af564299"></a><!-- doxytag: member="sf::Vector2::y" ref="a420f2481b015f4eb929c75f2af564299" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classsf_1_1Vector2.htm">sf::Vector2</a>&lt; T &gt;::<a class="el" href="classsf_1_1Vector2.htm#a420f2481b015f4eb929c75f2af564299">y</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Y coordinate of the vector. </p>

<p>Definition at line <a class="el" href="Vector2_8hpp_source.htm#l00076">76</a> of file <a class="el" href="Vector2_8hpp_source.htm">Vector2.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Vector2_8hpp_source.htm">Vector2.hpp</a></li>
<li><a class="el" href="Vector2_8inl_source.htm">Vector2.inl</a></li>
</ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
